/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout.index'
import { Route as AppLayoutImport } from './routes/app/_layout'
import { Route as LayoutAboutImport } from './routes/_layout.about'
import { Route as AppLayoutIndexImport } from './routes/app/_layout.index'

// Create Virtual Routes

const AppImport = createFileRoute('/app')()

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const AppLayoutRoute = AppLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AppRoute,
} as any)

const LayoutAboutRoute = LayoutAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LayoutRoute,
} as any)

const AppLayoutIndexRoute = AppLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/about': {
      id: '/_layout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof LayoutAboutImport
      parentRoute: typeof LayoutImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/app/_layout': {
      id: '/app/_layout'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppLayoutImport
      parentRoute: typeof AppRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/app/_layout/': {
      id: '/app/_layout/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppLayoutIndexImport
      parentRoute: typeof AppLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutAboutRoute: typeof LayoutAboutRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAboutRoute: LayoutAboutRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface AppLayoutRouteChildren {
  AppLayoutIndexRoute: typeof AppLayoutIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutIndexRoute: AppLayoutIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AppRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/about': typeof LayoutAboutRoute
  '/app': typeof AppLayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/app/': typeof AppLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof LayoutAboutRoute
  '/app': typeof AppLayoutIndexRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/about': typeof LayoutAboutRoute
  '/app': typeof AppRouteWithChildren
  '/app/_layout': typeof AppLayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/app/_layout/': typeof AppLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/about' | '/app' | '/' | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/app' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/about'
    | '/app'
    | '/app/_layout'
    | '/_layout/'
    | '/app/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/app"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/about",
        "/_layout/"
      ]
    },
    "/_layout/about": {
      "filePath": "_layout.about.tsx",
      "parent": "/_layout"
    },
    "/app": {
      "filePath": "app",
      "children": [
        "/app/_layout"
      ]
    },
    "/app/_layout": {
      "filePath": "app/_layout.tsx",
      "parent": "/app",
      "children": [
        "/app/_layout/"
      ]
    },
    "/_layout/": {
      "filePath": "_layout.index.tsx",
      "parent": "/_layout"
    },
    "/app/_layout/": {
      "filePath": "app/_layout.index.tsx",
      "parent": "/app/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
